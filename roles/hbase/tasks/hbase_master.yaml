---
- name: Create configuration directory
  file:
    path: '{{ hbase_master_conf_dir }}'
    state: directory
    group: '{{ hadoop_group }}'
    owner: '{{ hbase_user }}'

- name: Backup configuration
  copy:
    src: '{{ hbase_master_conf_dir }}/'
    dest: '{{ hbase_master_conf_dir }}.{{ ansible_date_time.epoch }}'
    group: '{{ hadoop_group }}'
    owner: '{{ hbase_user }}'
    remote_src: yes
  tags:
    - backup

- name: Template hbase-env.sh
  template:
    src: hbase-env.sh.j2
    dest: '{{ hbase_master_conf_dir }}/hbase-env.sh'

- name: Template log4j.properties
  template:
    src: log4j.properties.j2
    dest: '{{ hbase_master_conf_dir }}/log4j.properties'

- name: Template HBase Master service file
  template:
    src: hbase-master.service.j2
    dest: /usr/lib/systemd/system/hbase-master.service

- name: Render hbase-site.xml
  template:
    src: hbase-site.xml.j2
    dest: '{{ hbase_master_conf_dir }}/hbase-site.xml'

- name: Render ssl-server.xml
  template:
    src: ssl-server.xml.j2
    dest: '{{ hbase_master_conf_dir }}/ssl-server.xml'

- name: Copy core-site.xml
  copy:
    src: /etc/hadoop/conf.nn/core-site.xml
    dest: '{{ hbase_master_conf_dir }}/core-site.xml'
    remote_src: yes

- name: Copy hdfs-site.xml
  copy:
    src: /etc/hadoop/conf.nn/hdfs-site.xml
    dest: '{{ hbase_master_conf_dir }}/hdfs-site.xml'
    remote_src: yes

- name: Generate principals and keytabs
  shell: |
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "addprinc -randkey hbase/{{ ansible_fqdn }}"
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "xst -k hbase.service.keytab hbase/{{ ansible_fqdn }}@{{ realm }}"
    chown {{ hbase_user }}:{{ hadoop_group }} hbase.service.keytab
  args:
    chdir: /etc/security/keytabs
    creates: /etc/security/keytabs/hbase.service.keytab

- name: Convert cert and key to pk12
  shell: |
    openssl pkcs12 \
      -export \
      -in /etc/ssl/certs/{{ ansible_fqdn }}.pem \
      -inkey /etc/ssl/certs/{{ ansible_fqdn }}.key \
      -out /etc/ssl/certs/{{ ansible_fqdn }}.p12 \
      -name {{ ansible_fqdn }} \
      -CAfile /etc/ssl/certs/root.pem \
      -caname root_ca \
      -password pass:{{ hbase_keystore_password }}
  args:
    creates: '/etc/ssl/certs/{{ ansible_fqdn }}.p12'

- name: Create keystore and add Certificate Authority into it
  shell: |
    keytool \
      -importkeystore \
      -deststorepass {{ hbase_keystore_password }} \
      -destkeypass {{ hbase_keystore_password }} \
      -destkeystore {{ hbase_keystore_location }} \
      -srckeystore /etc/ssl/certs/{{ ansible_fqdn }}.p12 \
      -srcstoretype PKCS12 \
      -srcstorepass {{ hbase_keystore_password }} \
      -alias {{ ansible_fqdn }}

    keytool \
      -keystore {{ hbase_keystore_location }} \
      -alias root_ca \
      -import \
      -file /etc/ssl/certs/root.pem \
      -storepass {{ hbase_keystore_password }} \
      -noprompt
  args:
    creates: '{{ hbase_keystore_location }}'

- name: Create truststore
  shell: |
    keytool \
    -keystore {{ hbase_truststore_location }} \
    -deststorepass {{ hbase_truststore_password }} \
    -alias root_ca \
    -import \
    -file /etc/ssl/certs/root.pem \
    -noprompt
  args:
    creates: '{{ hbase_truststore_location }}'
