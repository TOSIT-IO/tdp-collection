---
- import_role:
    name: tosit.tdp.spark.common
    tasks_from: install

- name: Create configuration directory
  file:
    path: '{{ spark_hs_conf_dir }}'
    state: directory
    group: '{{ hadoop_group }}'
    owner: '{{ spark_user }}'

- name: Backup configuration
  copy:
    src: '{{ spark_hs_conf_dir }}/'
    dest: '{{ spark_hs_conf_dir }}.{{ ansible_date_time.epoch }}'
    group: '{{ hadoop_group }}'
    owner: '{{ spark_user }}'
    remote_src: yes
  tags:
    - backup

- name: Template spark-env.sh
  template:
    src: spark-env.sh.j2
    dest: '{{ spark_hs_conf_dir }}/spark-env.sh'

- name: Template spark-defaults.conf
  template:
    src: spark-defaults.conf.j2
    dest: '{{ spark_hs_conf_dir }}/spark-defaults.conf'

- name: Convert cert and key to pk12
  shell: |
    openssl pkcs12 \
      -export \
      -in /etc/ssl/certs/{{ ansible_fqdn }}.pem \
      -inkey /etc/ssl/certs/{{ ansible_fqdn }}.key \
      -out /etc/ssl/certs/{{ ansible_fqdn }}.p12 \
      -name {{ ansible_fqdn }} \
      -CAfile /etc/ssl/certs/root.pem \
      -caname root_ca \
      -password pass:{{ spark_keystore_password }}
  args:
    creates: '/etc/ssl/certs/{{ ansible_fqdn }}.p12'

- name: Create keystore and add Certificate Authority into it
  shell: |
    keytool \
      -importkeystore \
      -deststorepass {{ spark_keystore_password }} \
      -destkeypass {{ spark_keystore_password }} \
      -destkeystore {{ spark_keystore_location }} \
      -srckeystore /etc/ssl/certs/{{ ansible_fqdn }}.p12 \
      -srcstoretype PKCS12 \
      -srcstorepass {{ spark_keystore_password }} \
      -alias {{ ansible_fqdn }}

    keytool \
      -keystore {{ spark_keystore_location }} \
      -alias root_ca \
      -import \
      -file /etc/ssl/certs/root.pem \
      -storepass {{ spark_keystore_password }} \
      -noprompt
  args:
    creates: '{{ spark_keystore_location }}'

- name: Create truststore
  shell: |
    keytool \
      -keystore {{ spark_truststore_location }} \
      -deststorepass {{ spark_truststore_password }} \
      -alias root_ca \
      -import \
      -file /etc/ssl/certs/root.pem \
      -noprompt
  args:
    creates: '{{ spark_truststore_location }}'

- name: Generate principals and keytabs
  shell: |
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "addprinc -randkey spark/{{ ansible_fqdn }}"
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "xst -k spark.service.keytab spark/{{ ansible_fqdn }}@{{ realm }}"
    chown {{ spark_user }}:{{ hadoop_group }} spark.service.keytab
  args:
    chdir: /etc/security/keytabs
    creates: /etc/security/keytabs/spark.service.keytab

- name: Generate principals and keytabs for spnego
  shell: |
    cd /etc/security/keytabs
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "addprinc -randkey HTTP/{{ ansible_fqdn }}"
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "xst -k spnego.service.keytab HTTP/{{ ansible_fqdn }}@{{ realm }}"
    chown {{ spark_user }}:{{ hadoop_group }} spnego.service.keytab
  args:
    chdir: /etc/security/keytabs
    creates: /etc/security/keytabs/spnego.service.keytab

- name: Ensure spnego keytab mode is 640
  file:
    path: /etc/security/keytabs/spnego.service.keytab
    mode: '640'

- name: Template Spark History Server service file
  template:
    src: spark-history-server.service.j2
    dest: /usr/lib/systemd/system/spark-history-server.service
