# Copyright 2022 TOSIT.IO
# SPDX-License-Identifier: Apache-2.0

---
- hosts: edge
  collections:
    - tosit.tdp
  vars:
    #ldap_admin_dn: 
    #ldap_admin_pwd: 
    ldap_group_base: ou=groups,c=fr
    ldap_user_base: ou=users,c=fr
    test_user: testuser
    test_password: testpassword
    test_group: testgroup
    test_uid: 1100
    test_gid: 2100

  tasks:
    - name: Install openldap client
      package:
        name: openldap-clients

    - name: Create test group ldif
      copy:
        content: |
          dn: cn={{ test_group }},{{ ldap_group_base }}
          objectClass: top
          objectClass: posixGroup
          cn: {{ test_group }}
          gidNumber: {{ test_gid }}
        dest: /tmp/testgroup.ldif

    - name: Apply test group ldif
      command: "ldapadd -x -D {{ ldap_admin_dn }} -w {{ ldap_admin_pwd }} -h {{ groups['ldap'][0] | tosit.tdp.access_fqdn(hostvars) }} -f /tmp/testgroup.ldif"
      register: reg_ldapadd_user
      failed_when: |
        reg_ldapadd_user is failed and
        reg_ldapadd_user.rc != 68
      changed_when: reg_ldapadd_user.rc != 68

    - name: Create test user ldif
      copy:
        content: |
          dn: uid={{ test_user }},{{ ldap_user_base }}
          uid: {{ test_user }}
          objectClass: posixAccount
          objectClass: inetOrgPerson
          cn: Test user
          sn: Test
          uidNumber: {{ test_uid }}
          gidNumber: {{ test_gid }}
          homeDirectory: /home/{{ test_user }}
          loginShell: /bin/bash
        dest: /tmp/testuser.ldif

    - name: Apply test group ldif
      command: "ldapadd -x -D {{ ldap_admin_dn }} -w {{ ldap_admin_pwd }} -h {{ groups['ldap'][0] | tosit.tdp.access_fqdn(hostvars) }} -f /tmp/testuser.ldif"
      register: reg_ldapadd_group
      failed_when: |
        reg_ldapadd_group is failed and
        reg_ldapadd_group.rc != 68
      changed_when: reg_ldapadd_group.rc != 68

    - name: Check user
      command: "id -u {{ test_user }}"
      changed_when: no
      register: reg_check_user

    - name: Check group
      command: "id -ng {{ test_user }}"
      changed_when: no
      register: reg_check_group

    - name: Assert that user is pulled from ldap to unix
      assert:
        that:
          - reg_check_user.stdout == (test_uid | string)
        success_msg: User correctly pulled from ldap
        fail_msg: User not pulled from ldap.

    - name: Assert that group is pulled from ldap to unix
      assert:
        that:
          - reg_check_group.stdout == test_group
        success_msg: Group correctly pulled from ldap
        fail_msg: Group not pulled from ldap.

    - name: Create Kerberos user
      command: "kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q \"addprinc -pw {{ test_password }} {{ test_user }}@{{ realm }}\""

    - name: Get user keytab
      shell: |
        set timeout 10
        spawn ktutil

        expect "ktutil:"
        send "add_entry -password -p {{ test_user }}@{{ realm }} -k 1 -e aes256-cts-hmac-sha1-96\r"

        expect "Password for {{ test_user }}@{{ realm }}:"
        send "{{ test_password }}\r"

        expect "ktutil:"
        send "add_entry -password -p {{ test_user }}@{{ realm }} -k 1 -e aes128-cts-hmac-sha1-96\r"

        expect "Password for {{ test_user }}@{{ realm }}:"
        send "{{ test_password }}\r"

        expect "ktutil:"
        send "write_kt {{ test_user }}.keytab\r"

        expect "ktutil:"
        send "quit\r"

        expect eof
        exit 0
      args:
        executable: /usr/bin/expect
        creates: "{{ test_user }}.keytab"
      register: reg_ktutil
