---
- import_role:
    name: tosit.tdp.hadoop.common

- name: Upload {{ ranger_yarn_dist_file }}
  copy:
    src: "files/{{ ranger_yarn_dist_file }}"
    dest: /tmp

- name: Extract {{ ranger_yarn_dist_file }}
  unarchive:
    src: "/tmp/{{ ranger_yarn_dist_file }}"
    dest: "{{ hadoop_root_dir }}"
    group: root
    owner: root
    remote_src: yes
    creates: "{{ hadoop_root_dir }}/{{ ranger_yarn_release }}"

- name: Create symbolic link to Ranger installation
  file:
    src: "{{ hadoop_root_dir }}/{{ ranger_yarn_release }}"
    dest: "{{ ranger_yarn_install_dir }}"
    state: link

- name: Template install.properties
  template:
    src: install_yarn.properties.j2
    dest: "{{ ranger_yarn_install_dir }}/install.properties"

# Ranger installation scripts finds hadoop at "../hadoop" to add necessary properties to hdfs-site.xml, generate the ranger-*.xml
# It can also be configured with COMPONENT_INSTALL_DIR_NAME but we still have to make /opt/hadoop/etc/hadoop a symbolic link to /etc/hadoop/conf.rm to get the configurations at the right place
# TODO: find a better way to do this

- name: Backup {{ hadoop_install_dir }}/etc/hadoop
  command: mv {{ hadoop_install_dir }}/etc/hadoop {{ hadoop_install_dir }}/etc/hadoop.bk
  args:
    creates: "{{ hadoop_install_dir }}/etc/hadoop.bk"

- name: Create symbolic link from etc/hadoop in {{ hadoop_install_dir }} to actual Resourcemanager config dir
  file:
    src: "{{ hadoop_rm_conf_dir }}"
    dest: "{{ hadoop_install_dir }}/etc/hadoop"
    state: link

# We also need to fix the path of the ranger-policymgr-ssl.xml containing the trustore properties in ranger-yarn-security.xml
- name: Fix the path of ranger-policymgr-ssl.xml in ranger-yarn-security-changes.cfg
  lineinfile:
    path: "{{ ranger_yarn_install_dir }}/install/conf.templates/enable/ranger-yarn-security-changes.cfg"
    regexp: '^ranger.plugin.yarn.policy.rest.ssl.config.file\s+([^ ]+) (.*)$'
    line: 'ranger.plugin.yarn.policy.rest.ssl.config.file    /etc/hadoop/conf.rm/ranger-policymgr-ssl.xml \2'
    backrefs: yes

- name: Run enable-yarn-plugin.sh
  shell: |
    export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk
    ./enable-yarn-plugin.sh
  args:
    chdir: "{{ ranger_yarn_install_dir }}"

- name: Create YARN service
  run_once: true
  uri:
    url: "{{ ranger_yarn_install_properties.POLICY_MGR_URL }}/service/plugins/services"
    method: POST
    body:
      name: "{{ ranger_yarn_install_properties.REPOSITORY_NAME }}"
      isEnabled: true
      configs:
        username: yarn
        password: yarn
        policy.download.auth.users: yarn
        hadoop.security.authentication: kerberos
        yarn.url: "https://{{ yarn_site['yarn.resourcemanager.webapp.https.address.rm1'] }},https://{{ yarn_site['yarn.resourcemanager.webapp.https.address.rm2'] }}"
      type: yarn
    body_format: json
    force_basic_auth: yes
    user: admin
    password: "{{ ranger_admin_password }}"
    headers:
      Content-Type: application/json
    status_code: [200, 400]
    validate_certs: no
  register: reg_yarn
  changed_when: reg_yarn.status == 200
  failed_when: |
    reg_yarn is failed or
    reg_yarn.status == 400 and
    (reg_yarn.json.msgDesc is not defined or
    'Duplicate service name' not in reg_yarn.json.msgDesc)

- name: Restart YARN Resource Manager
  service:
    name: hadoop-yarn-resourcemanager
    state: restarted

