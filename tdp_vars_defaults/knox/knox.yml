# Copyright 2022 TOSIT.IO
# SPDX-License-Identifier: Apache-2.0

---
# Knox version
knox_release: knox-1.6.1-TDP-0.1.0-SNAPSHOT
knox_dist_file: "{{ knox_release }}.tar.gz"

knoxshell_release: knoxshell-1.6.1-TDP-0.1.0-SNAPSHOT
knoxshell_dist_file: "{{ knoxshell_release }}.tar.gz"

# Knox users and group
hdfs_user: hdfs
knox_user: knox
knox_group: hadoop

# Knox installation directory
knox_root_dir: /opt/tdp
knox_install_dir: "{{ knox_root_dir }}/knox"
knoxshell_install_dir: "{{ knox_root_dir }}/knoxshell"

# Knox PID directory
knox_pid_dir: /var/run/knox

# Knox logging configuration
# Root logger level should be: [FATAL| ERROR| WARN| INFO| DEBUG| TRACE]
knox_root_logger_level: INFO
# Root logger should be: [RFA | DRFA]
knox_root_logger: RFA
# Common appenders config
knox_log_dir: /var/log/knox
knox_gateway_log_file: "knox-gateway_${HOSTNAME}.log"
knox_log_layout_pattern: "%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n"
# DRFA appenders config
knox_log_drfa_date_pattern: "'.'yyyy-MM-dd"
# RFA appenders config
knox_log_rfa_maxfilesize: 256MB
knox_log_rfa_maxbackupindex: 10

# Knox configuration directory
knox_conf_dir: /etc/knox/conf
knox_data_dir: /var/lib/knox

# Knox Keystore directory
knox_keystore_dir: "{{ knox_data_dir }}/data/security/keystores"

# Kerberos
###
# Set to 'no' to skip service principals and keytabs creation.
# This can be useful if TDP operators don't have admin access to the Kerberos server,
# or if the Kerberos server does not support MIT Kerberos tools.
###
krb_create_principals_keytabs: yes

# SSL Keystore and Truststore
knox_keystore_location: /etc/ssl/certs/keystore.jks
knox_keystore_password: Keystore123!
knox_truststore_location: /etc/ssl/certs/truststore.jks
knox_truststore_password: Truststore123!

# Hadoop configuration directory
hadoop_conf_dir: /etc/hadoop/conf

# Gateway-site
gateway_site:
  gateway.port: "{{ knox_gateway_https_port }}"
  gateway.path: gateway
  gateway.hadoop.kerberos.secured: "true"
  java.security.krb5.conf: /etc/krb5.conf
  java.security.auth.login.config: "{{ knox_conf_dir }}/krb5JAASLogin.conf"
  gateway.deployment.dir: "{{ knox_data_dir }}/data/deployments"
  gateway.security.dir: "{{ knox_data_dir }}/data/security"
  gateway.data.dir: "{{ knox_data_dir }}/data"
  gateway.hadoop.conf.dir: "{{ knox_conf_dir }}"
  gateway.cluster.config.monitor.ambari.enabled: "false"
  gateway.metrics.enabled: "true"
  gateway.jmx.metrics.reporting.enabled: "true"
  gateway.truststore.path: "{{ knox_truststore_location }}"
  gateway.httpclient.truststore.path: "{{ knox_truststore_location }}"
  gateway.tls.keystore.path: "{{ knox_keystore_location }}"
  gateway.tls.key.alias: "{{ ansible_fqdn }}"

topology_common_ha_configuration: maxFailoverAttempts=3;failoverSleep=1000;maxRetryAttempts=300;retrySleep=1000;enabled=true

zookeeper_quorum: |
  {{ groups['zk'] |
    map('tosit.tdp.access_fqdn', hostvars) |
    map('regex_replace', '^(.*)$', '\1:' + zookeeper_server_client_port | string) |
    list |
    join(',') }}

gateway_topology:
  tdpldap:
    providers:
      authentication:
        name: ShiroProvider
        parameters:
          main.ldapRealm: org.apache.hadoop.gateway.shirorealm.KnoxLdapRealm
          main.ldapRealm.contextFactory.authenticationMechanism: simple
          main.ldapRealm.contextFactory.url: "ldap://{{ groups['ldap'] | first | tosit.tdp.access_fqdn(hostvars) }}:389"
          main.ldapRealm.userDnTemplate: "uid={0},ou=users,c=fr"
          sessionTimeout: 30
          urls./**: authcBasic
      authorization:
        name: AclsAuthz
        parameters:
          webhdfs.acl: "*;*;*"
      ha:
        name: HaProvider
        parameters:
          HIVE: "{{ topology_common_ha_configuration }};zookeeperEnsemble={{ zookeeper_quorum | trim }};zookeeperNamespace=hiveserver2"
          RESOURCEMANAGER: "{{ topology_common_ha_configuration }}"
          WEBHBASE: "{{ topology_common_ha_configuration }}"
          WEBHDFS: "{{ topology_common_ha_configuration }}"
          YARNUI: "{{ topology_common_ha_configuration }}"
          HBASEUI: "{{ topology_common_ha_configuration }}"
          HDFSUI: "{{ topology_common_ha_configuration }}"
          NAMENODE: "{{ topology_common_ha_configuration }}"
      identity-assertion:
        name: Default
    services:
      NAMENODE:
        hosts: "{{ groups['hdfs_nn'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ hdfs_nn_rpc_port }}"
        scheme: hdfs://
      HDFSUI:
        hosts: "{{ groups['hdfs_nn'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ hdfs_nn_https_port }}"
        version: 2.7.0
      JOBHISTORYUI:
        hosts:
          - "{{ groups['mapred_jhs'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | first }}"
        port: "{{ mapred_jhs_https_port }}"
      HIVE: {}
      RANGERUI:
        hosts: "{{ groups['ranger_admin'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ ranger_adm_https_port }}"
      RESOURCEMANAGER:
        hosts: "{{ groups['yarn_rm'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        location: /ws
        port: "{{ yarn_rm_https_port }}"
      SPARKHISTORYUI:
        hosts: "{{ groups['spark_hs'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ spark_hs_https_port }}"
      SPARK3HISTORYUI:
        hosts: "{{ groups['spark3_hs'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ spark3_hs_https_port}}"
      WEBHBASE:
        hosts: "{{ groups['hbase_rest'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ hbase_rest_https_port }}"
      WEBHDFS:
        hosts: "{{ groups['hdfs_nn'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        location: /webhdfs
        port: "{{ hdfs_nn_https_port }}"
      YARNUI:
        hosts: "{{ groups['yarn_rm'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ yarn_rm_https_port }}"
      HBASEUI:
        hosts: "{{ groups['hbase_master'] | default([]) | map('tosit.tdp.access_fqdn', hostvars) | list }}"
        port: "{{ hbase_master_info_https_port }}"

# Service start on boot policies
knox_start_on_boot: no

# Service restart policies
knox_restart: "no"

# Ranger Knox properties
ranger_knox_release: ranger-2.0.1-TDP-0.1.0-SNAPSHOT-knox-plugin
ranger_knox_dist_file: "{{ ranger_knox_release }}.tar.gz"
ranger_knox_install_dir: "{{ knox_root_dir }}/ranger-knox-plugin"
ranger_knox_install_properties:
  audit_hdfs: "hdfs://{{ cluster_name }}"
  POLICY_MGR_URL: https://{{ groups['ranger_admin'][0] | tosit.tdp.access_fqdn(hostvars) }}:{{ ranger_adm_https_port }}
  REPOSITORY_NAME: knox-tdp
  XAAUDIT_SOLR_ENABLE: "{% if 'ranger_solr' in groups and groups['ranger_solr'] %}true{% else %}false{% endif %}"
  XAAUDIT_SOLR_URL: "{% if 'ranger_solr' in groups and groups['ranger_solr'] %}http://{{ groups['ranger_solr'][0] | tosit.tdp.access_fqdn(hostvars) }}:{{ ranger_solr_http_port }}/solr/ranger_audits{% else %}NONE{% endif %}"
ranger_knox_service_properties:
  knox_url: https://{{ groups['knox'][0] | tosit.tdp.access_fqdn(hostvars) }}:{{ knox_gateway_https_port }}
  common_name_certificate: |
    {{ groups['knox'] |
      map('tosit.tdp.access_fqdn', hostvars) |
      list |
      join(',') | trim }}

# Knox Gateway resources allocation
knox_gateway_heapsize: 1024m

# jmx exporter installation directory
jmx_exporter_root_dir: /opt/tdp/jmx-exporter
jmx_exporter_install_file: "{{ jmx_exporter_root_dir }}/jmx-exporter.jar"

# jmx exporter configuration directory
jmx_exporter_conf_dir: /etc/jmx-exporter

# jmx options
jmx_common_opts: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=true"

# jmx-exporter
jmx_exporter_kn_opts: "{% if 'exporter_jmx' in groups and groups['exporter_jmx'] %}-javaagent:{{ jmx_exporter_install_file }}={{ exporter_knox_gateway_http_port }}:{{ jmx_exporter_conf_dir }}/kn.yml{% else %}{% endif %}"

jmxremote_username: jmxuser
jmxremote_password: Tdpjmx123,

#jmx-exporter.yml
jmx_exporter:
  startDelaySeconds: 0
  ssl: true
  username: "{{ jmxremote_username }}"
  password: "{{ jmxremote_password }}"
  lowercaseOutputName: false
  lowercaseOutputLabelNames: false
