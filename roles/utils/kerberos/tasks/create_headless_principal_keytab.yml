---
# First Step : Try to fetch all headless_keytabs from hosts
- name: Check if headless_keytab file exists
  stat: 
    path: "{{ keytabs_dir }}/{{ keytab }}"
  register: headless_keytab_stat

- name: Fetch content of headless_keytab if exists
  slurp:
    src: "{{ keytabs_dir }}/{{ keytab }}"
  register: headless_keytab_encoded
  when: headless_keytab_stat.stat.exists

- name: Set local facts where headless_keytab exists
  set_fact:
    headless_keytab: "{{ headless_keytab_encoded.content }}"
  when: headless_keytab_stat.stat.exists

- name: Set fact the first headless_keytab found
  vars:
    # Get all local "headless_keytab" and remove undefined
    headless_keytab_list: "{{ ansible_play_hosts | map('extract', hostvars, 'headless_keytab') | select | list }}"
  set_fact:
    headless_keytab: "{{ headless_keytab_list | first }}"
  when: headless_keytab_list | length > 0
  run_once: yes

# Second Step : Create a new headless_keytab if not exists
- import_role:
    name: tosit.tdp.utils.kerberos
    tasks_from: create_principal_keytab
  when: (headless_keytab is not defined) or (headless_keytab == "")
  run_once: yes

- name: Load the new headless_keytab when not exists
  slurp:
    src: "{{ keytabs_dir }}/{{ keytab }}"
  register: headless_keytab_encoded
  run_once: yes
  when: (headless_keytab is not defined) or (headless_keytab == "")

- name: Set fact the new headless_keytab when not exists
  set_fact:
    headless_keytab: "{{ headless_keytab_encoded.content }}"
  run_once: yes
  when: (headless_keytab is not defined) or (headless_keytab == "")

# Final Step : Copy the headless_keytab to all hosts with an idempotent behavior
- name: Copy headless_keytab to all hosts
  copy:
    content: "{{ headless_keytab | b64decode }}"
    dest: "{{ keytabs_dir }}/{{ keytab }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: "{{ mode }}"
  no_log: yes

- name: Reset headless_keytab fact for next usage
  set_fact:
    headless_keytab: ""
