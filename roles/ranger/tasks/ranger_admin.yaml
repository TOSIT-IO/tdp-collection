---
- name: Upload {{ ranger_dist_file }}
  copy:
    src: "files/{{ ranger_dist_file }}"
    dest: /tmp

- name: Extract {{ ranger_dist_file }}
  unarchive:
    src: "/tmp/{{ ranger_dist_file }}"
    dest: "{{ ranger_root_dir }}"
    group: root
    owner: root
    remote_src: yes
    creates: "{{ ranger_root_dir }}/{{ ranger_release }}"

- name: Create symbolic link to Ranger installation
  file:
    src: "{{ ranger_root_dir }}/{{ ranger_release }}"
    dest: "{{ ranger_install_dir }}"
    state: link

- name: Create directory for pid
  file:
    path: '{{ ranger_pid_dir }}'
    state: directory
    group: '{{ hadoop_group }}'
    owner: '{{ ranger_user }}'

- name: Create log directory
  file:
    path: '{{ ranger_log_dir }}'
    state: directory
    group: '{{ hadoop_group }}'
    owner: '{{ ranger_user }}'

- name: Install jdbc connector
  package:
    name: "{{ ranger_jdbc_connector_package }}"
    state: present

- name: Template install.properties
  template:
    src: install.properties.j2
    dest: "{{ ranger_install_dir }}/install.properties"

- name: Convert cert and key to pk12
  shell: |
    openssl pkcs12 \
      -export \
      -in /etc/ssl/certs/{{ ansible_fqdn }}.pem \
      -inkey /etc/ssl/certs/{{ ansible_fqdn }}.key \
      -out /etc/ssl/certs/{{ ansible_fqdn }}.p12 \
      -name {{ ansible_fqdn }} \
      -CAfile /etc/ssl/certs/root.pem \
      -caname root_ca \
      -password pass:{{ ranger_keystore_password }}
  args:
    creates: '/etc/ssl/certs/{{ ansible_fqdn }}.p12'

- name: Create keystore and add Certificate Authority into it
  shell: |
    keytool \
      -importkeystore \
      -deststorepass {{ ranger_keystore_password }} \
      -destkeypass {{ ranger_keystore_password }} \
      -destkeystore {{ ranger_keystore_location }} \
      -srckeystore /etc/ssl/certs/{{ ansible_fqdn }}.p12 \
      -srcstoretype PKCS12 \
      -srcstorepass {{ ranger_keystore_password }} \
      -alias {{ ansible_fqdn }}

    keytool \
      -keystore {{ ranger_keystore_location }} \
      -alias root_ca \
      -import \
      -file /etc/ssl/certs/root.pem \
      -storepass {{ ranger_keystore_password }} \
      -noprompt
  args:
    creates: '{{ ranger_keystore_location }}'

# Truststore is needed for Hive lookup
- name: Create truststore
  shell: |
    keytool \
      -keystore {{ ranger_truststore_location }} \
      -deststorepass {{ ranger_truststore_password }} \
      -alias root_ca \
      -import \
      -file /etc/ssl/certs/root.pem \
      -noprompt
  args:
    creates: '{{ ranger_truststore_location }}'

- name: Generate principals and keytabs for Ranger Lookup
  shell: |
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "addprinc -randkey rangerlookup/{{ ansible_fqdn }}"
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "xst -k rangerlookup.service.keytab rangerlookup/{{ ansible_fqdn }}@{{ realm }}"
    chown {{ ranger_user }}:{{ hadoop_group }} rangerlookup.service.keytab
  args:
    chdir: /etc/security/keytabs
    creates: /etc/security/keytabs/rangerlookup.service.keytab

- name: Generate principals and keytabs for spnego
  shell: |
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "addprinc -randkey HTTP/{{ ansible_fqdn }}"
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "xst -k spnego.service.keytab HTTP/{{ ansible_fqdn }}@{{ realm }}"
    chown {{ ranger_user }}:{{ hadoop_group }} spnego.service.keytab
  args:
    chdir: /etc/security/keytabs
    creates: /etc/security/keytabs/spnego.service.keytab

- name: Ensure spnego keytab mode is 640
  file:
    path: /etc/security/keytabs/spnego.service.keytab
    mode: '640'

- name: Run setup.sh
  shell: |
    export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk
    ./setup.sh
  args:
    chdir: '{{ ranger_install_dir }}'

- name: Create symbolic link to configuration directory
  file:
    src: '{{ ranger_install_dir }}/conf'
    dest: '{{ ranger_adm_conf_dir }}'
    state: link
    group: '{{ hadoop_group }}'
    owner: '{{ ranger_user }}'

# Needed for HDFS path lookup in policy creation
- name: Copy hdfs-site.xml
  copy:
    src: /etc/hadoop/conf/hdfs-site.xml
    dest: '{{ ranger_install_dir }}/conf/hdfs-site.xml'
    remote_src: yes

- name: Template Ranger Admin service file
  template:
    src: ranger-admin.service.j2
    dest: /usr/lib/systemd/system/ranger-admin.service

- name: Start Ranger Admin
  service:
    name: ranger-admin
    state: started
