# Copyright 2022 TOSIT.IO
# SPDX-License-Identifier: Apache-2.0

---
- name: ZK service check - Check create/remove znode
  run_once: yes
  become_user: "{{ zookeeper_user }}"
  block:
    - name: ZK service check - Check create znode
      ansible.builtin.shell: |
        {{ zookeeper_cli_cmd_script }} << EOF
        create {{ zookeeper_check_znode }} "check-create-znode-data"
        quit
        EOF
      register: zk_create_znode
      changed_when: no
      failed_when: '("Created " + zookeeper_check_znode) not in zk_create_znode.stderr'
    - name: ZK service check - Check remove znode
      ansible.builtin.shell: |
        {{ zookeeper_cli_cmd_script }} << EOF
        {{ 'rmr' if zookeeper_version is version('3.5', '<') else 'deleteall' }} {{ zookeeper_check_znode }}
        get {{ zookeeper_check_znode }}
        quit
        EOF
      register: zk_remove_znode
      changed_when: no
      failed_when: |
        ("Node does not exist: " + zookeeper_check_znode) not in zk_remove_znode.stderr
        and ("KeeperErrorCode = NoNode for " + zookeeper_check_znode) not in zk_remove_znode.stderr
  always:
    - name: ZK service check - Clean znode
      ansible.builtin.shell: |
        {{ zookeeper_cli_cmd_script }} << EOF
        {{ 'rmr' if zookeeper_version is version('3.5', '<') else 'deleteall' }} {{ zookeeper_check_znode }}
        quit
        EOF
      changed_when: no
      when: '("Node already exists: " + zookeeper_check_znode) in zk_create_znode.stderr'

- name: ZK service check - Check number of leader is 1
  run_once: yes
  become_user: "{{ zookeeper_user }}"
  block:
    - name: ZK service check - Fetch server mode
      ansible.builtin.shell: /usr/bin/echo srvr | /usr/bin/nc {{ item }} {{ zookeeper_server_client_port }} | /usr/bin/awk '$1=="Mode:" {print $2}'
      register: zk_server_mode
      changed_when: no
      loop: "{{ groups['zk'] }}"
    - name: ZK service check - Failed if number of leaders is not 1
      ansible.builtin.assert:
        that: "{{ zk_server_mode.results | selectattr('stdout', 'in', 'leader') | list | length == 1 }}"
