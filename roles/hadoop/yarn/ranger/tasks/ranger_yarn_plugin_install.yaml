---
- name: Upload {{ ranger_yarn_dist_file }}
  copy:
    src: "files/{{ ranger_yarn_dist_file }}"
    dest: /tmp

- name: Extract {{ ranger_yarn_dist_file }}
  unarchive:
    src: "/tmp/{{ ranger_yarn_dist_file }}"
    dest: "{{ hadoop_root_dir }}"
    group: root
    owner: root
    remote_src: yes
    creates: "{{ hadoop_root_dir }}/{{ ranger_yarn_release }}"

- name: Create symbolic link to Ranger installation
  file:
    src: "{{ hadoop_root_dir }}/{{ ranger_yarn_release }}"
    dest: "{{ ranger_yarn_install_dir }}"
    state: link

- name: Create YARN service
  run_once: true
  uri:
    url: "{{ ranger_yarn_install_properties.POLICY_MGR_URL }}/service/plugins/services"
    method: POST
    body:
      name: "{{ ranger_yarn_install_properties.REPOSITORY_NAME }}"
      isEnabled: true
      configs:
        username: yarn
        password: yarn
        policy.download.auth.users: yarn
        hadoop.security.authentication: kerberos
        yarn.url: "https://{{ yarn_site['yarn.resourcemanager.webapp.https.address.rm1'] }},https://{{ yarn_site['yarn.resourcemanager.webapp.https.address.rm2'] }}"
      type: yarn
    body_format: json
    force_basic_auth: yes
    user: admin
    password: "{{ ranger_admin_password }}"
    headers:
      Content-Type: application/json
    status_code: [200, 400]
    validate_certs: no
  register: reg_yarn
  changed_when: reg_yarn.status == 200
  failed_when: |
    reg_yarn is failed or
    reg_yarn.status == 400 and
    (reg_yarn.json.msgDesc is not defined or
    'Duplicate service name' not in reg_yarn.json.msgDesc)
