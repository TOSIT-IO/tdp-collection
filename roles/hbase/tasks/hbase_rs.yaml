---
- name: Create directory for pid
  file:
    path: '{{ hbase_pid_dir }}'
    state: directory
    group: '{{ hadoop_group }}'
    owner: '{{ hbase_user }}'

- name: Create timestamped configuration directory
  file:
    path: '{{ hbase_rs_conf_dir }}.{{ ansible_date_time.epoch }}'
    state: directory
    group: '{{ hadoop_group }}'
    owner: '{{ hbase_user }}'

- name: Create symbolic link to timestamped configuration directory
  file:
    src: '{{ hbase_rs_conf_dir }}.{{ ansible_date_time.epoch }}'
    dest: '{{ hbase_rs_conf_dir }}'
    state: link
    group: '{{ hadoop_group }}'
    owner: '{{ hbase_user }}'

- name: Template hbase-env.sh
  template:
    src: hbase-env.sh.j2
    dest: '{{ hbase_rs_conf_dir }}.{{ ansible_date_time.epoch }}/hbase-env.sh'

- name: Template log4j.properties
  template:
    src: log4j.properties.j2
    dest: '{{ hbase_rs_conf_dir }}.{{ ansible_date_time.epoch }}/log4j.properties'

- name: Template HBase RegionServer service file
  template:
    src: hbase-regionserver.service.j2
    dest: /usr/lib/systemd/system/hbase-regionserver.service

- name: Render hbase-site.xml
  template:
    src: hbase-site.xml.j2
    dest: '{{ hbase_rs_conf_dir }}.{{ ansible_date_time.epoch }}/hbase-site.xml'

- name: Render ssl-server.xml
  template:
    src: ssl-server.xml.j2
    dest: '{{ hbase_rs_conf_dir }}.{{ ansible_date_time.epoch }}/ssl-server.xml'

- name: Copy core-site.xml
  copy:
    src: /etc/hadoop/conf.dn/core-site.xml
    dest: '{{ hbase_rs_conf_dir }}/core-site.xml'
    remote_src: yes

- name: Copy hdfs-site.xml
  copy:
    src: /etc/hadoop/conf.dn/hdfs-site.xml
    dest: '{{ hbase_rs_conf_dir }}/hdfs-site.xml'
    remote_src: yes

- name: Generate principals and keytabs
  shell: |
    cd /etc/security/keytabs
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "addprinc -randkey hbase/{{ ansible_fqdn }}"
    kadmin -r {{ realm }} -p {{ kadmin_principal }} -w {{ kadmin_password }} -q "xst -k hbase.service.keytab hbase/{{ ansible_fqdn }}@{{ realm }}"
    chown {{ hbase_user }}:{{ hadoop_group }} hbase.service.keytab

- name: Convert cert and key to pk12
  shell: openssl pkcs12 -export -in /etc/ssl/certs/{{ ansible_fqdn }}.pem -inkey /etc/ssl/certs/{{ ansible_fqdn }}.key -out /tmp/{{ ansible_fqdn }}.p12 -name {{ ansible_fqdn }} -CAfile /etc/ssl/certs/root.pem -caname root_ca -password pass:{{ hbase_keystore_password }}

- name: Verify if keystore already exists
  stat:
    path: '{{ hbase_keystore_location }}'
  register: keystore

- name: Create keystore
  shell: keytool -importkeystore -deststorepass {{ hbase_keystore_password }} -destkeypass {{ hbase_keystore_password }} -destkeystore {{ hbase_keystore_location }} -srckeystore /tmp/{{ ansible_fqdn }}.p12 -srcstoretype PKCS12 -srcstorepass {{ hbase_keystore_password }} -alias {{ ansible_fqdn }}
  when: not keystore.stat.exists

- name: Add Certificate Authority to the keystore
  shell: keytool -keystore {{ hbase_keystore_location }} -alias root_ca -import -file /etc/ssl/certs/root.pem -storepass {{ hbase_keystore_password }} -noprompt
  when: not keystore.stat.exists

- name: Verify if truststore already exists
  stat:
    path: '{{ hbase_truststore_location }}'
  register: truststore

- name: Create truststore
  shell: keytool -keystore {{ hbase_truststore_location }} -deststorepass {{ hbase_truststore_password }} -alias root_ca -import -file /etc/ssl/certs/root.pem -noprompt
  when: not truststore.stat.exists
